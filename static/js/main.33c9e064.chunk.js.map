{"version":3,"sources":["NoteEditor.js","Note.js","NotesGrid.js","NoteSearch.js","Notes.js","App.js","serviceWorker.js","index.js"],"names":["NoteEditor","handleTextChange","event","setState","text","target","value","handleNoteAdd","newNote","state","color","id","Date","now","props","onNoteAdd","handleColorChange","className","placeholder","rows","this","onChange","type","name","htmlFor","style","backgroundColor","onClick","React","Component","Note","onDelete","children","NotesGrid","grid","refs","msnry","Masonry","itemSelector","columnWidth","gutter","isFitWidth","prevProps","notes","length","reloadItems","layout","onNoteDelete","ref","map","note","key","bind","NoteSearch","handleSearch","onSearch","toLowerCase","NotesApp","handleNoteDelete","noteId","newNotes","filter","slice","unshift","searchValue","_updateLocalStorage","JSON","stringify","localStorage","setItem","filteredNotes","localNotes","parse","getItem","prevState","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33c9e064.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class NoteEditor extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        text: \"\",\r\n        color: \"#FFA726\"\r\n      };\r\n    }\r\n  \r\n    handleTextChange = event => {\r\n      this.setState({ text: event.target.value });\r\n    };\r\n  \r\n    handleNoteAdd = () => {\r\n      var newNote = {\r\n        text: this.state.text,\r\n        color: this.state.color,\r\n        id: Date.now()\r\n      };\r\n  \r\n      this.props.onNoteAdd(newNote);\r\n      this.setState({ text: \"\" });\r\n    };\r\n  \r\n    handleColorChange = event => {\r\n      this.setState({ color: event.target.value });\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"note-editor\">\r\n          <textarea\r\n            placeholder=\"Enter your note here...\"\r\n            rows={5}\r\n            className=\"textarea\"\r\n            value={this.state.text}\r\n            onChange={this.handleTextChange}\r\n          />\r\n          <div className=\"color-picker\" onChange={this.handleColorChange}>\r\n            <input type=\"radio\" name=\"color-pick\" value=\"#F06292\" id=\"color1\" />\r\n            <label\r\n              htmlFor=\"color1\"\r\n              style={{ backgroundColor: \"#F06292\" }}\r\n            ></label>\r\n            <input type=\"radio\" name=\"color-pick\" value=\"#BA68C8\" id=\"color2\" />\r\n            <label\r\n              htmlFor=\"color2\"\r\n              style={{ backgroundColor: \"#BA68C8\" }}\r\n            ></label>\r\n            <input type=\"radio\" name=\"color-pick\" value=\"#FFD54F\" id=\"color3\" />\r\n            <label\r\n              htmlFor=\"color3\"\r\n              style={{ backgroundColor: \"#FFD54F\" }}\r\n            ></label>\r\n            <input type=\"radio\" name=\"color-pick\" value=\"#4FC3F7\" id=\"color4\" />\r\n            <label\r\n              htmlFor=\"color4\"\r\n              style={{ backgroundColor: \"#4FC3F7\" }}\r\n            ></label>\r\n            <input type=\"radio\" name=\"color-pick\" value=\"#AED581\" id=\"color5\" />\r\n            <label\r\n              htmlFor=\"color5\"\r\n              style={{ backgroundColor: \"#AED581\" }}\r\n            ></label>\r\n          </div>\r\n          <button className=\"add-button\" onClick={this.handleNoteAdd}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  ","import React from 'react';\r\n\r\nexport default class Note extends React.Component {\r\n    render() {\r\n      var style = { backgroundColor: this.props.color };\r\n      return (\r\n        <div className=\"note\" style={style}>\r\n          <span className=\"delete-note\" onClick={this.props.onDelete}>\r\n            {\" \"}\r\n            Ã—{\" \"}\r\n          </span>\r\n          {this.props.children}\r\n        </div>\r\n      );\r\n    }\r\n  }","import Masonry from \"masonry-layout\";\r\n\r\nimport React from 'react';\r\nimport Note from \"./Note\";\r\nexport default class NotesGrid extends React.Component {\r\n    componentDidMount() {\r\n      var grid = this.refs.grid;\r\n      this.msnry = new Masonry(grid, {\r\n        itemSelector: \".note\",\r\n        columnWidth: 200,\r\n        gutter: 10,\r\n        isFitWidth: true\r\n      });\r\n    }\r\n  \r\n    componentDidUpdate(prevProps) {\r\n      if (this.props.notes.length !== prevProps.notes.length) {\r\n        this.msnry.reloadItems();\r\n        this.msnry.layout();\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      var onNoteDelete = this.props.onNoteDelete;\r\n  \r\n      return (\r\n        <div className=\"notes-grid\" ref=\"grid\">\r\n          {this.props.notes.map(function(note) {\r\n            return (\r\n              <Note\r\n                key={note.id}\r\n                onDelete={onNoteDelete.bind(null, note)}\r\n                color={note.color}\r\n              >\r\n                {note.text}\r\n              </Note>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  ","import React from \"react\";\r\n\r\n\r\nexport default class NoteSearch extends React.Component {\r\n    handleSearch = event => {\r\n      this.props.onSearch(event.target.value.toLowerCase());\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n        <input\r\n          type=\"search\"\r\n          className=\"search-input\"\r\n          placeholder=\"Search...\"\r\n          onChange={event => {\r\n            this.handleSearch(event);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  }","import React from \"react\";\r\nimport NoteEditor from \"./NoteEditor\";\r\nimport NotesGrid from \"./NotesGrid\";\r\nimport NoteSearch from \"./NoteSearch\";\r\n\r\nexport default class NotesApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      notes: [],\r\n      searchValue: \"\",\r\n      filteredNotes: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    var localNotes = JSON.parse(localStorage.getItem(\"notes\"));\r\n    if (localNotes) {\r\n      this.setState({ notes: localNotes, filteredNotes: localNotes });\r\n    }\r\n  }\r\n  \r\n  componentDidUpdate(prevProps, prevState) {\r\n    this._updateLocalStorage();\r\n    if (this.state.searchValue !== \"\" && this.state.searchValue !== prevState.searchValue) {\r\n      this.setState({\r\n        filteredNotes: this.state.notes.filter(\r\n          note =>\r\n            note.text\r\n              .toLowerCase()\r\n              .indexOf(this.state.searchValue.toLowerCase()) !== -1\r\n        )\r\n      });\r\n    } \r\n    else if(this.state.filteredNotes === this.state.notes){\r\n        //do nothing  \r\n    }\r\n    else if (this.state.searchValue === \"\"){\r\n      this.setState({\r\n        filteredNotes: this.state.notes //this was trying to call unlimited times \r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  handleNoteDelete = note => {\r\n    var noteId = note.id;\r\n    var newNotes = this.state.notes.filter(function(note) {\r\n      return note.id !== noteId;\r\n    });\r\n    this.setState({ notes: newNotes });\r\n  };\r\n\r\n  handleNoteAdd = newNote => {\r\n    var newNotes = this.state.notes.slice();\r\n    newNotes.unshift(newNote);\r\n    this.setState({ notes: newNotes });\r\n  };\r\n\r\n  handleSearch = text => {\r\n    this.setState({ searchValue: text });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"notes-app\">\r\n        <h2 className=\"app-header\">NotesApp</h2>\r\n        <NoteSearch onSearch={text => this.handleSearch(text)} />\r\n        <NoteEditor onNoteAdd={this.handleNoteAdd} />\r\n        <NotesGrid\r\n          notes={this.state.filteredNotes} //this.state.filteredNotes\r\n          onNoteDelete={this.handleNoteDelete}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _updateLocalStorage = () => {\r\n    var notes = JSON.stringify(this.state.notes);\r\n    localStorage.setItem(\"notes\", notes);\r\n  };\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NotesApp from './Notes';\r\n\r\nfunction App() {\r\n  return (\r\n        <NotesApp />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}